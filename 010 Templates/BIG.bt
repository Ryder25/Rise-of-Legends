//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------
LittleEndian();

string readTextName(struct text& entry)
{
    if (entry.strLength == 0)
        return "";

    return entry.str;
}
struct text
{
    uint32 strLength;
    wchar_t str[strLength];
};
string readFileName(struct AssetHeader& f)
{
    return f.name.str;
}

struct BhgDependencyData
{
    struct text depPath;
    uint32 hash;
};

struct BhgDependencyArray
{
    uint32 fileCount;

    if (fileCount > 0)
    {
        uint32 capacity;
        byte flags[3];
        
        struct BhgDependencyData dependencies[fileCount] <optimize=false>;
    }
};

struct AssetHeader
{
    struct text name <read=readTextName>;
    
    uint32 padding;
    uint32 padding;
    uint32 offset;
    uint32 size;
    uint32 padding;
    time_t timeStamp;
    struct text type <read=readTextName>;
    uint16 flags;

    local int64 currentPos = FTell();
    FSeek(offset);
    uint32 compressedSize;
    byte data[compressedSize];
    FSeek(currentPos);
};

struct BhgAssetHeaderArray
{
    uint32 fileCount;
    uint32 capacity;
    byte flags[3];

    struct AssetHeader assets[fileCount] <optimize=false,read=readFileName>;
};

struct
{
    uint32 version;
    byte validState;
    struct text magic <read=readTextName>;
    
    struct BhgDependencyArray depArray;
    struct BhgAssetHeaderArray assetArray;
} f;